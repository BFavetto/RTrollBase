// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// Qdate
Date Qdate(std::string datestring);
RcppExport SEXP _RTrollBase_Qdate(SEXP datestringSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type datestring(datestringSEXP);
    rcpp_result_gen = Rcpp::wrap(Qdate(datestring));
    return rcpp_result_gen;
END_RCPP
}
// Qdatevect
std::vector<Date> Qdatevect(std::vector<std::string> datevect);
RcppExport SEXP _RTrollBase_Qdatevect(SEXP datevectSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::string> >::type datevect(datevectSEXP);
    rcpp_result_gen = Rcpp::wrap(Qdatevect(datevect));
    return rcpp_result_gen;
END_RCPP
}
// AddQuarter
Date AddQuarter(Date currentdate);
RcppExport SEXP _RTrollBase_AddQuarter(SEXP currentdateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Date >::type currentdate(currentdateSEXP);
    rcpp_result_gen = Rcpp::wrap(AddQuarter(currentdate));
    return rcpp_result_gen;
END_RCPP
}
// AddQuarterStr
std::string AddQuarterStr(std::string datestring);
RcppExport SEXP _RTrollBase_AddQuarterStr(SEXP datestringSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type datestring(datestringSEXP);
    rcpp_result_gen = Rcpp::wrap(AddQuarterStr(datestring));
    return rcpp_result_gen;
END_RCPP
}
// str_split_cpp
std::vector<std::string> str_split_cpp(const std::string& s);
RcppExport SEXP _RTrollBase_str_split_cpp(SEXP sSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type s(sSEXP);
    rcpp_result_gen = Rcpp::wrap(str_split_cpp(s));
    return rcpp_result_gen;
END_RCPP
}
// recup_troll_str_vec
std::vector<std::string> recup_troll_str_vec(std::string filename);
RcppExport SEXP _RTrollBase_recup_troll_str_vec(SEXP filenameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type filename(filenameSEXP);
    rcpp_result_gen = Rcpp::wrap(recup_troll_str_vec(filename));
    return rcpp_result_gen;
END_RCPP
}
// dateMerge
DataFrame dateMerge(DataFrame left, DataFrame right);
RcppExport SEXP _RTrollBase_dateMerge(SEXP leftSEXP, SEXP rightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type left(leftSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type right(rightSEXP);
    rcpp_result_gen = Rcpp::wrap(dateMerge(left, right));
    return rcpp_result_gen;
END_RCPP
}
// minimum_date
Date minimum_date(Date date1, Date date2);
RcppExport SEXP _RTrollBase_minimum_date(SEXP date1SEXP, SEXP date2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Date >::type date1(date1SEXP);
    Rcpp::traits::input_parameter< Date >::type date2(date2SEXP);
    rcpp_result_gen = Rcpp::wrap(minimum_date(date1, date2));
    return rcpp_result_gen;
END_RCPP
}
// maximum_date
Date maximum_date(Date date1, Date date2);
RcppExport SEXP _RTrollBase_maximum_date(SEXP date1SEXP, SEXP date2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Date >::type date1(date1SEXP);
    Rcpp::traits::input_parameter< Date >::type date2(date2SEXP);
    rcpp_result_gen = Rcpp::wrap(maximum_date(date1, date2));
    return rcpp_result_gen;
END_RCPP
}
// recup_troll
List recup_troll(std::vector<std::string> str_vec);
RcppExport SEXP _RTrollBase_recup_troll(SEXP str_vecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::string> >::type str_vec(str_vecSEXP);
    rcpp_result_gen = Rcpp::wrap(recup_troll(str_vec));
    return rcpp_result_gen;
END_RCPP
}
// recup_troll_rcpp
List recup_troll_rcpp(std::string filename);
RcppExport SEXP _RTrollBase_recup_troll_rcpp(SEXP filenameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type filename(filenameSEXP);
    rcpp_result_gen = Rcpp::wrap(recup_troll_rcpp(filename));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_RTrollBase_Qdate", (DL_FUNC) &_RTrollBase_Qdate, 1},
    {"_RTrollBase_Qdatevect", (DL_FUNC) &_RTrollBase_Qdatevect, 1},
    {"_RTrollBase_AddQuarter", (DL_FUNC) &_RTrollBase_AddQuarter, 1},
    {"_RTrollBase_AddQuarterStr", (DL_FUNC) &_RTrollBase_AddQuarterStr, 1},
    {"_RTrollBase_str_split_cpp", (DL_FUNC) &_RTrollBase_str_split_cpp, 1},
    {"_RTrollBase_recup_troll_str_vec", (DL_FUNC) &_RTrollBase_recup_troll_str_vec, 1},
    {"_RTrollBase_dateMerge", (DL_FUNC) &_RTrollBase_dateMerge, 2},
    {"_RTrollBase_minimum_date", (DL_FUNC) &_RTrollBase_minimum_date, 2},
    {"_RTrollBase_maximum_date", (DL_FUNC) &_RTrollBase_maximum_date, 2},
    {"_RTrollBase_recup_troll", (DL_FUNC) &_RTrollBase_recup_troll, 1},
    {"_RTrollBase_recup_troll_rcpp", (DL_FUNC) &_RTrollBase_recup_troll_rcpp, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_RTrollBase(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
